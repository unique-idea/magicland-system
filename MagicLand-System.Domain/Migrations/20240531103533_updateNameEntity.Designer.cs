// <auto-generated />
using System;
using MagicLand_System.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MagicLand_System.Domain.Migrations
{
    [DbContext(typeof(MagicLandContext))]
    [Migration("20240531103533_updateNameEntity")]
    partial class updateNameEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MagicLand_System.Domain.Models.Attendance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsPresent")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MakeUpFromScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("StudentId");

                    b.ToTable("Attendance", (string)null);
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.ToTable("CartItem", (string)null);
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClassCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LeastNumberStudent")
                        .HasColumnType("int");

                    b.Property<Guid>("LecturerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LimitNumberStudent")
                        .HasColumnType("int");

                    b.Property<string>("Method")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Video")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("LecturerId");

                    b.ToTable("Class", (string)null);
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaxYearOldsStudent")
                        .HasColumnType("int");

                    b.Property<int?>("MinYearOldsStudent")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfSession")
                        .HasColumnType("int");

                    b.Property<string>("SubjectName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SyllabusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SyllabusId")
                        .IsUnique();

                    b.ToTable("Course", (string)null);
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.CoursePrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CoursePrice", (string)null);
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.Evaluate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MakeUpFromScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("StudentId");

                    b.ToTable("Evaluate", (string)null);
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.ExamQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExamResultResultId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MultipleChoiceAnswerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QuestionImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExamResultResultId");

                    b.HasIndex("MultipleChoiceAnswerId")
                        .IsUnique()
                        .HasFilter("[MultipleChoiceAnswerId] IS NOT NULL");

                    b.ToTable("ExamQuestion", (string)null);
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.ExamResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CorrectMark")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("DoingTime")
                        .HasColumnType("time");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExamName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExamStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoAttempt")
                        .HasColumnType("int");

                    b.Property<string>("QuizCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuizName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuizType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ScoreEarned")
                        .HasColumnType("float");

                    b.Property<Guid>("StudentClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TotalMark")
                        .HasColumnType("int");

                    b.Property<double>("TotalScore")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("StudentClassId");

                    b.ToTable("ExamResult", (string)null);
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.ExamSyllabus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("CompletionCriteria")
                        .HasColumnType("float");

                    b.Property<string>("ContentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Method")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Part")
                        .HasColumnType("int");

                    b.Property<string>("QuestionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SyllabusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("SyllabusId");

                    b.ToTable("ExamSyllabus", (string)null);
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.FlashCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("FlashCard", (string)null);
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.FlashCardAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CorrectRightCardAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CorrectRightCardAnswerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CorrectRightCardAnswerImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ExamQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LeftCardAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LeftCardAnswerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LeftCardAnswerImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RightCardAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RightCardAnswerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RightCardAnswerImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExamQuestionId");

                    b.ToTable("FlashCardAnswer", (string)null);
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.LecturerField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LecturerField", (string)null);
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.Material", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SyllabusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SyllabusId");

                    b.ToTable("Material", (string)null);
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.MultipleChoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("MultipleChoice", (string)null);
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.MultipleChoiceAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AnswerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AnswerImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrectAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CorrectAnswerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CorrectAnswerImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ExamQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MultipleChoiceAnswer", (string)null);
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Identify")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.PersonalWallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("PersonalWallet", (string)null);
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuestionPacketId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionPacketId");

                    b.ToTable("Question", (string)null);
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.QuestionPackage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoSession")
                        .HasColumnType("int");

                    b.Property<int>("OrderPackage")
                        .HasColumnType("int");

                    b.Property<string>("PackageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuizType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SessionId")
                        .IsUnique();

                    b.ToTable("QuestionPackage", (string)null);
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.Rate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("RateScore")
                        .HasColumnType("float");

                    b.Property<Guid>("Rater")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Rate", (string)null);
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int?>("Floor")
                        .HasColumnType("int");

                    b.Property<string>("LinkURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Room", (string)null);
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SubLecturerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("RoomId");

                    b.HasIndex("SlotId");

                    b.ToTable("Schedule", (string)null);
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoSession")
                        .HasColumnType("int");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("Session", (string)null);
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.SessionDescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Detail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid?>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("SessionDescription", (string)null);
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.SideFlashCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FlashCardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Side")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FlashCardId");

                    b.ToTable("SideFlashCard", (string)null);
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.Slot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Slot", (string)null);
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("AvatarImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.StudentClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AddedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("CanChangeClass")
                        .HasColumnType("bit");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SavedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentClass", (string)null);
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.StudentInCart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CartItemId");

                    b.ToTable("StudentInCart", (string)null);
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.SubDescriptionContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubDescriptionTitleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubDescriptionTitleId");

                    b.ToTable("SubDescriptionContent", (string)null);
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.SubDescriptionTitle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("SubDescriptionTitle", (string)null);
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.Syllabus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("MinAvgMarkToPass")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumOfSessions")
                        .HasColumnType("int");

                    b.Property<Guid?>("PrequisiteSyllabusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ScoringScale")
                        .HasColumnType("float");

                    b.Property<string>("StudentTasks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SyllabusCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SyllabusLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimePerSession")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SyllabusCategoryId");

                    b.ToTable("Syllabus", (string)null);
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.SyllabusCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SyllabusCategory", (string)null);
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.TempEntity.Class.TempQuizTime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AttemptAllowed")
                        .HasColumnType("int");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("ExamEndTime")
                        .HasColumnType("time");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("ExamStartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("TempQuizTime", (string)null);
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.TempEntity.Quiz.TempFCAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumberCoupleIdentify")
                        .HasColumnType("int");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<Guid>("TempQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TempQuestionId");

                    b.ToTable("TempFCAnswer", (string)null);
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.TempEntity.Quiz.TempMCAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnswerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<Guid>("TempQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TempQuestionId");

                    b.ToTable("TempMCAnswer", (string)null);
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.TempEntity.Quiz.TempQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TempQuizId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TempQuizId");

                    b.ToTable("TempQuestion", (string)null);
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.TempEntity.Quiz.TempQuiz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExamType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsGraded")
                        .HasColumnType("bit");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TotalMark")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TempQuiz", (string)null);
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.Topic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("SyllabusId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SyllabusId");

                    b.ToTable("Topic", (string)null);
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvatarImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateOfBirth")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LecturerFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PersonalWalletId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StudentIdAccount")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CartId")
                        .IsUnique()
                        .HasFilter("[CartId] IS NOT NULL");

                    b.HasIndex("LecturerFieldId");

                    b.HasIndex("PersonalWalletId")
                        .IsUnique()
                        .HasFilter("[PersonalWalletId] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Phone" }, "UX_User_Phone");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.WalletTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<string>("Method")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Money")
                        .HasColumnType("float");

                    b.Property<Guid>("PersonalWalletId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Signature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PersonalWalletId");

                    b.ToTable("WalletTransaction", (string)null);
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.Attendance", b =>
                {
                    b.HasOne("MagicLand_System.Domain.Models.Schedule", "Schedule")
                        .WithMany("Attendances")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MagicLand_System.Domain.Models.Student", "Student")
                        .WithMany("Attendances")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Schedule");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.CartItem", b =>
                {
                    b.HasOne("MagicLand_System.Domain.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.Class", b =>
                {
                    b.HasOne("MagicLand_System.Domain.Models.Course", "Course")
                        .WithMany("Classes")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MagicLand_System.Domain.Models.User", "Lecture")
                        .WithMany("Classes")
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Lecture");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.Course", b =>
                {
                    b.HasOne("MagicLand_System.Domain.Models.Syllabus", "Syllabus")
                        .WithOne("Course")
                        .HasForeignKey("MagicLand_System.Domain.Models.Course", "SyllabusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Syllabus");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.CoursePrice", b =>
                {
                    b.HasOne("MagicLand_System.Domain.Models.Course", "Course")
                        .WithMany("CoursePrices")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.Evaluate", b =>
                {
                    b.HasOne("MagicLand_System.Domain.Models.Schedule", "Schedule")
                        .WithMany("Evaluates")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MagicLand_System.Domain.Models.Student", "Student")
                        .WithMany("Evaluates")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Schedule");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.ExamQuestion", b =>
                {
                    b.HasOne("MagicLand_System.Domain.Models.ExamResult", "ExamResult")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("ExamResultResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MagicLand_System.Domain.Models.MultipleChoiceAnswer", "MultipleChoiceAnswer")
                        .WithOne("ExamQuestion")
                        .HasForeignKey("MagicLand_System.Domain.Models.ExamQuestion", "MultipleChoiceAnswerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ExamResult");

                    b.Navigation("MultipleChoiceAnswer");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.ExamResult", b =>
                {
                    b.HasOne("MagicLand_System.Domain.Models.StudentClass", "StudentClass")
                        .WithMany("ExamResults")
                        .HasForeignKey("StudentClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentClass");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.ExamSyllabus", b =>
                {
                    b.HasOne("MagicLand_System.Domain.Models.Syllabus", "Syllabus")
                        .WithMany("ExamSyllabuses")
                        .HasForeignKey("SyllabusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Syllabus");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.FlashCard", b =>
                {
                    b.HasOne("MagicLand_System.Domain.Models.Question", "Question")
                        .WithMany("FlashCards")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.FlashCardAnswer", b =>
                {
                    b.HasOne("MagicLand_System.Domain.Models.ExamQuestion", "ExamQuestion")
                        .WithMany("FlashCardAnswers")
                        .HasForeignKey("ExamQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExamQuestion");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.Material", b =>
                {
                    b.HasOne("MagicLand_System.Domain.Models.Syllabus", "Syllabus")
                        .WithMany("Materials")
                        .HasForeignKey("SyllabusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Syllabus");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.MultipleChoice", b =>
                {
                    b.HasOne("MagicLand_System.Domain.Models.Question", "Question")
                        .WithMany("MutipleChoices")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.Notification", b =>
                {
                    b.HasOne("MagicLand_System.Domain.Models.User", "TargetUser")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("TargetUser");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.Question", b =>
                {
                    b.HasOne("MagicLand_System.Domain.Models.QuestionPackage", "QuestionPackage")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionPacketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionPackage");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.QuestionPackage", b =>
                {
                    b.HasOne("MagicLand_System.Domain.Models.Session", "Session")
                        .WithOne("QuestionPackage")
                        .HasForeignKey("MagicLand_System.Domain.Models.QuestionPackage", "SessionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Session");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.Rate", b =>
                {
                    b.HasOne("MagicLand_System.Domain.Models.Course", "Course")
                        .WithMany("Rates")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.Schedule", b =>
                {
                    b.HasOne("MagicLand_System.Domain.Models.Class", "Class")
                        .WithMany("Schedules")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MagicLand_System.Domain.Models.Room", "Room")
                        .WithMany("Schedules")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MagicLand_System.Domain.Models.Slot", "Slot")
                        .WithMany("Schedules")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Room");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.Session", b =>
                {
                    b.HasOne("MagicLand_System.Domain.Models.Topic", "Topic")
                        .WithMany("Sessions")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.SessionDescription", b =>
                {
                    b.HasOne("MagicLand_System.Domain.Models.Session", "Session")
                        .WithMany("SessionDescriptions")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Session");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.SideFlashCard", b =>
                {
                    b.HasOne("MagicLand_System.Domain.Models.FlashCard", "FlashCard")
                        .WithMany("SideFlashCards")
                        .HasForeignKey("FlashCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlashCard");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.Student", b =>
                {
                    b.HasOne("MagicLand_System.Domain.Models.User", "Parent")
                        .WithMany("Students")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.StudentClass", b =>
                {
                    b.HasOne("MagicLand_System.Domain.Models.Class", "Class")
                        .WithMany("StudentClasses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MagicLand_System.Domain.Models.Student", "Student")
                        .WithMany("StudentClasses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.StudentInCart", b =>
                {
                    b.HasOne("MagicLand_System.Domain.Models.CartItem", "CartItem")
                        .WithMany("StudentInCarts")
                        .HasForeignKey("CartItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CartItem");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.SubDescriptionContent", b =>
                {
                    b.HasOne("MagicLand_System.Domain.Models.SubDescriptionTitle", "SubDescriptionTitle")
                        .WithMany("SubDescriptionContents")
                        .HasForeignKey("SubDescriptionTitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubDescriptionTitle");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.SubDescriptionTitle", b =>
                {
                    b.HasOne("MagicLand_System.Domain.Models.Course", "Course")
                        .WithMany("SubDescriptionTitles")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.Syllabus", b =>
                {
                    b.HasOne("MagicLand_System.Domain.Models.SyllabusCategory", "SyllabusCategory")
                        .WithMany("Syllabuses")
                        .HasForeignKey("SyllabusCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SyllabusCategory");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.TempEntity.Quiz.TempFCAnswer", b =>
                {
                    b.HasOne("MagicLand_System.Domain.Models.TempEntity.Quiz.TempQuestion", "TempQuestion")
                        .WithMany("FCAnswers")
                        .HasForeignKey("TempQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TempQuestion");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.TempEntity.Quiz.TempMCAnswer", b =>
                {
                    b.HasOne("MagicLand_System.Domain.Models.TempEntity.Quiz.TempQuestion", "TempQuestion")
                        .WithMany("MCAnswers")
                        .HasForeignKey("TempQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TempQuestion");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.TempEntity.Quiz.TempQuestion", b =>
                {
                    b.HasOne("MagicLand_System.Domain.Models.TempEntity.Quiz.TempQuiz", "TempQuiz")
                        .WithMany("Questions")
                        .HasForeignKey("TempQuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TempQuiz");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.Topic", b =>
                {
                    b.HasOne("MagicLand_System.Domain.Models.Syllabus", "Syllabus")
                        .WithMany("Topics")
                        .HasForeignKey("SyllabusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Syllabus");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.User", b =>
                {
                    b.HasOne("MagicLand_System.Domain.Models.Cart", "Cart")
                        .WithOne("User")
                        .HasForeignKey("MagicLand_System.Domain.Models.User", "CartId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MagicLand_System.Domain.Models.LecturerField", "LecturerField")
                        .WithMany("Users")
                        .HasForeignKey("LecturerFieldId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MagicLand_System.Domain.Models.PersonalWallet", "PersonalWallet")
                        .WithOne("User")
                        .HasForeignKey("MagicLand_System.Domain.Models.User", "PersonalWalletId");

                    b.HasOne("MagicLand_System.Domain.Models.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_USER_ROLE");

                    b.Navigation("Cart");

                    b.Navigation("LecturerField");

                    b.Navigation("PersonalWallet");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.WalletTransaction", b =>
                {
                    b.HasOne("MagicLand_System.Domain.Models.PersonalWallet", "PersonalWallet")
                        .WithMany("WalletTransactions")
                        .HasForeignKey("PersonalWalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonalWallet");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.Cart", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.CartItem", b =>
                {
                    b.Navigation("StudentInCarts");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.Class", b =>
                {
                    b.Navigation("Schedules");

                    b.Navigation("StudentClasses");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.Course", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("CoursePrices");

                    b.Navigation("Rates");

                    b.Navigation("SubDescriptionTitles");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.ExamQuestion", b =>
                {
                    b.Navigation("FlashCardAnswers");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.ExamResult", b =>
                {
                    b.Navigation("ExamQuestions");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.FlashCard", b =>
                {
                    b.Navigation("SideFlashCards");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.LecturerField", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.MultipleChoiceAnswer", b =>
                {
                    b.Navigation("ExamQuestion");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.PersonalWallet", b =>
                {
                    b.Navigation("User");

                    b.Navigation("WalletTransactions");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.Question", b =>
                {
                    b.Navigation("FlashCards");

                    b.Navigation("MutipleChoices");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.QuestionPackage", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.Room", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.Schedule", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("Evaluates");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.Session", b =>
                {
                    b.Navigation("QuestionPackage");

                    b.Navigation("SessionDescriptions");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.Slot", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.Student", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("Evaluates");

                    b.Navigation("StudentClasses");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.StudentClass", b =>
                {
                    b.Navigation("ExamResults");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.SubDescriptionTitle", b =>
                {
                    b.Navigation("SubDescriptionContents");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.Syllabus", b =>
                {
                    b.Navigation("Course");

                    b.Navigation("ExamSyllabuses");

                    b.Navigation("Materials");

                    b.Navigation("Topics");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.SyllabusCategory", b =>
                {
                    b.Navigation("Syllabuses");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.TempEntity.Quiz.TempQuestion", b =>
                {
                    b.Navigation("FCAnswers");

                    b.Navigation("MCAnswers");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.TempEntity.Quiz.TempQuiz", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.Topic", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("MagicLand_System.Domain.Models.User", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Notifications");

                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
